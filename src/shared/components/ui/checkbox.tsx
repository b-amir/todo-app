import * as React from "react";
import { motion, AnimatePresence } from "framer-motion";
import { cn } from "@/src/shared/utils/tailwindUtils";

const UncheckedIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg
    width="782"
    height="813"
    viewBox="0 0 782 813"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <path
      d="M272 38.9999C66.8001 76.9999 22.1668 308.5 25.5001 419.5C25.5001 529.9 49.1532 590.5 71 622C135.5 715 401.5 901.7 623.5 682.5C845.5 463.3 730.111 182.5 671 126.5C623.5 81.4999 477.2 0.999947 272 38.9999Z"
      stroke="currentColor"
      strokeWidth="41"
    />
  </svg>
);

const CheckedIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg
    width="782"
    height="813"
    viewBox="0 0 782 813"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <path
      d="M272 38.9999C66.8001 76.9999 22.1668 308.5 25.5001 419.5C25.5001 529.9 49.1532 590.5 71 622C135.5 715 401.5 901.7 623.5 682.5C845.5 463.3 730.111 182.5 671 126.5C623.5 81.4999 477.2 0.999947 272 38.9999Z"
      stroke="currentColor"
      strokeWidth="41"
    />
    <path
      d="M722.029 257.5C706.629 111.974 544.324 71.9056 476.44 52.1515M722.029 257.5C684.669 231.726 648.864 185.251 613.882 156.946C569.074 120.69 522.11 87.2832 476.44 52.1515M722.029 257.5C727.527 272.895 744.93 322.597 738.042 338.097M476.44 52.1515C455.592 49.4226 397.415 41.7081 374.277 42.8665M738.042 338.097C626.027 240.137 483.455 143.804 374.277 42.8665M738.042 338.097C739.646 354.29 744.94 403.121 737.812 419.168M374.277 42.8665C345.041 39.6786 304.335 43.0253 277.931 47.4661M44 517.5C57.5 591 90.0431 639.603 147.5 683.5C179.203 707.725 242.312 737.079 277.931 748.66M277.931 748.66C253 736.873 233.873 704.007 192.5 662.547C147.768 617.722 79.6294 544.584 38.2825 496.889C33.549 467.219 35.6527 448.86 35.6527 407.5M277.931 748.66C316.118 755.975 395.74 764.728 434.019 759.755M434.019 759.755C301.519 636.442 220.5 637.579 35.6527 399C23.3839 374.5 38.2824 337.912 38.2825 324.195M434.019 759.755C447.893 756.82 486.928 743.687 500.422 739.259M38.2825 324.195C188.5 490.5 361.411 585.83 498.99 736.873C499.684 737.641 499.958 738.457 500.422 739.259M38.2825 324.195C41.0001 302.5 45.1419 292.955 49.4866 277.981M500.422 739.259C511.9 734.595 543.541 717.806 554.546 712.073M554.546 712.073C554.051 710.576 553.243 709.1 552.032 707.688C410.055 541.726 223.475 405.769 52.4566 268.052C58.7681 248.118 66.5071 229.256 75.3775 211.411M554.546 712.073C571.045 702.183 605.122 674.805 620.03 662.547M620.03 662.547C549.959 578.991 452.07 495.473 366.3 429.5C266.678 352.869 169.032 289.836 79.8238 203.01C87.9032 187.77 96.9946 173.491 106.86 160.065C191.582 231.286 279.664 298.619 366.3 367.625C468.6 449.113 555.978 541.349 651.733 628.509M620.03 662.547C631.313 651.966 641.775 640.476 651.733 628.509M651.733 628.509C661.072 615.547 685.115 582.35 692.695 568.002M692.695 568.002C520.13 424.39 319.892 261.2 158.765 105.047C142.103 118.828 126.749 134.489 113.007 152.02M692.695 568.002C705.72 578.845 734.205 509.16 722.029 496.889M692.695 568.002C704.871 544.953 714.564 521.101 722.029 496.889M722.029 496.889C641.934 423.451 571.249 344.704 484.201 276.608C394.299 206.276 301.312 139.955 209.933 71.5066M722.029 496.889C730.789 483 736.322 433.358 737.812 419.168M169.059 96.9157C181.92 87.2318 195.617 78.8264 209.933 71.5066M209.933 71.5066C226.626 64.2425 259.629 51.4178 277.931 47.4661M277.931 47.4661C277.896 49.0494 277.931 47.4661 280.512 51.731C455.424 149.892 580.809 300.065 737.812 419.168M22.5001 416.5C19.1668 305.5 63.8001 73.9999 269 35.9999C474.2 -2.00005 620.5 78.4999 668 123.5C727.111 179.5 842.5 460.3 620.5 679.5C398.5 898.7 132.5 712 68 619C46.1532 587.5 22.5001 526.9 22.5001 416.5Z"
      stroke="currentColor"
      strokeWidth="34"
    />
  </svg>
);

const Checkbox = React.forwardRef<
  HTMLInputElement,
  Omit<React.ComponentProps<"input">, "type">
>(({ className, checked, onChange, ...props }, ref) => {
  const id = React.useId();

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (onChange) {
      onChange(e);
    }
  };

  return (
    <label
      htmlFor={id}
      className={cn(
        "relative flex items-center justify-center w-8 h-8 cursor-pointer group",
        className
      )}
    >
      <input
        id={id}
        type="checkbox"
        ref={ref}
        checked={!!checked}
        onChange={handleChange}
        className="sr-only"
        {...props}
      />
      <motion.div
        className="absolute text-ink/80 group-hover:text-ink transition-colors"
        whileTap={{ scale: 0.9 }}
      >
        <UncheckedIcon className="w-6 h-6" />
      </motion.div>
      <AnimatePresence>
        {checked && (
          <motion.div
            className="absolute text-ink"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{
              duration: 0.2,
              ease: "easeInOut",
            }}
          >
            <CheckedIcon className="w-6 h-6" />
          </motion.div>
        )}
      </AnimatePresence>
    </label>
  );
});

Checkbox.displayName = "Checkbox";

export { Checkbox };
